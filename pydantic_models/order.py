# generated by datamodel-codegen:
#   filename:  order.schema
#   timestamp: 2025-05-13T00:35:34+00:00

"""
VDA5050プロトコルにおける注文(order)のデータモデル定義モジュール。

このモジュールは、マスターコントロールからAGV(無人搬送車)へ送信される注文のJSON構造を
Pydanticモデルとして定義しています。注文は、AGVが移動すべき経路(ノードとエッジのグラフ)と
各ノードやエッジ上で実行すべきアクションを指定します。

参照: VDA5050 v2.1.0 - セクション6.6 Topic: "order" (from master control to AGV)
"""

from __future__ import annotations

from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel, Field

from vda5050pydantic.pydantic_models.common import (
    Action,
    Corridor,
    NodePosition,
    Trajectory,
)


class Node(BaseModel):
    """
    AGVが移動する経路上のノード(地点)を表すモデル。
    
    ノードID、シーケンスID、位置情報、リリース状態(baseまたはhorizon)、
    および実行すべきアクションのリストを含みます。
    """
    nodeId: str = Field(
        ...,
        description='Unique node identification',
        examples=['pumpenhaus_1', 'MONTAGE'],
    )
    sequenceId: int = Field(
        ...,
        ge=0,
        description='Number to track the sequence of nodes and edges in an order and to simplify order updates.\nThe main purpose is to distinguish between a node which is passed more than once within one orderId. The variable sequenceId runs across all nodes and edges of the same order and is reset when a new orderId is issued.',
    )
    nodeDescription: Optional[str] = Field(
        None, description='Additional information on the node.'
    )
    released: bool = Field(
        ...,
        description='True indicates that the node is part of the base. False indicates that the node is part of the horizon.',
    )
    nodePosition: Optional[NodePosition] = Field(
        None,
        description='Defines the position on a map in world coordinates. Each floor has its own map. All maps must use the same project specific global origin. \nOptional for vehicle-types that do not require the node position (e.g., line-guided vehicles).',
    )
    actions: List[Action] = Field(
        ...,
        description='Array of actions to be executed on a node. Empty array, if no actions required.',
    )


class Edge(BaseModel):
    """
    二つのノード間の接続(エッジ)を表すモデル。
    
    エッジID、シーケンスID、開始/終了ノードID、リリース状態、
    最大速度、高さ制限、向き、軌跡情報などを含みます。
    """
    edgeId: str = Field(..., description='Unique edge identification')
    sequenceId: int = Field(
        ...,
        ge=0,
        description='Number to track the sequence of nodes and edges in an order and to simplify order updates. The variable sequenceId runs across all nodes and edges of the same order and is reset when a new orderId is issued.',
    )
    edgeDescription: Optional[str] = Field(
        None, description='Additional information on the edge.'
    )
    released: bool = Field(
        ...,
        description='True indicates that the edge is part of the base. False indicates that the edge is part of the horizon.',
    )
    startNodeId: str = Field(..., description='The nodeId of the start node.')
    endNodeId: str = Field(..., description='The nodeId of the end node.')
    maxSpeed: Optional[float] = Field(
        None,
        description='Permitted maximum speed on the edge in m/s. Speed is defined by the fastest measurement of the vehicle.',
    )
    maxHeight: Optional[float] = Field(
        None,
        description='Permitted maximum height of the vehicle, including the load, on edge in meters.',
    )
    minHeight: Optional[float] = Field(
        None,
        description='Permitted minimal height of the load handling device on the edge in meters',
    )
    orientation: Optional[float] = Field(
        None,
        ge=-3.14159265359,
        le=3.14159265359,
        description='Orientation of the AGV on the edge. The value orientationType defines if it has to be interpreted relative to the global project specific map coordinate system or tangential to the edge. In case of interpreted tangential to the edge 0.0 = forwards and PI = backwards. Example: orientation Pi/2 rad will lead to a rotation of 90 degrees. \nIf AGV starts in different orientation, rotate the vehicle on the edge to the desired orientation if rotationAllowed is set to True. If rotationAllowed is False, rotate before entering the edge. If that is not possible, reject the order. \nIf no trajectory is defined, apply the rotation to the direct path between the two connecting nodes of the edge. If a trajectory is defined for the edge, apply the orientation to the trajectory.',
    )
    orientationType: Optional[str] = Field(
        None,
        description='Enum {GLOBAL, TANGENTIAL}: \n"GLOBAL"- relative to the global project specific map coordinate system; \n"TANGENTIAL"- tangential to the edge. \nIf not defined, the default value is "TANGENTIAL".',
    )
    direction: Optional[str] = Field(
        None,
        description='Sets direction at junctions for line-guided or wire-guided vehicles, to be defined initially (vehicle-individual).',
    )
    rotationAllowed: Optional[bool] = Field(
        None,
        description='True: rotation is allowed on the edge. False: rotation is not allowed on the edge. \nOptional: No limit, if not set.',
    )
    maxRotationSpeed: Optional[float] = Field(
        None,
        description='Maximum rotation speed in rad/s. \nOptional: No limit, if not set.',
    )
    length: Optional[float] = Field(
        None,
        description='Distance of the path from startNode to endNode in meters. \nOptional: This value is used by line-guided AGVs to decrease their speed before reaching a stop position.',
    )
    trajectory: Optional[Trajectory] = Field(
        None,
        description='Trajectory JSON-object for this edge as a NURBS. Defines the curve, on which the AGV should move between startNode and endNode. \nOptional: Can be omitted, if AGV cannot process trajectories or if AGV plans its own trajectory.',
    )
    corridor: Optional[Corridor] = Field(
        None,
        description='Definition of boundaries in which a vehicle can deviate from its trajectory, e. g. to avoid obstacles.',
    )
    actions: List[Action] = Field(
        ..., description='Array of action objects with detailed information.'
    )


class OrderMessage(BaseModel):
    """
    注文メッセージの全体構造を表すルートモデル。
    
    ヘッダー情報、注文ID、注文更新ID、ノードとエッジのリストを含みます。
    注文は、AGVが移動すべき経路(ノードとエッジのグラフ)と各ノードやエッジ上で
    実行すべきアクションを指定します。
    """
    headerId: int = Field(
        ...,
        description='headerId of the message. The headerId is defined per topic and incremented by 1 with each sent (but not necessarily received) message.',
    )
    timestamp: datetime = Field(
        ...,
        description='Timestamp in ISO8601 format (YYYY-MM-DDTHH:mm:ss.ffZ).',
        examples=['1991-03-11T11:40:03.12Z'],
    )
    version: str = Field(
        ...,
        description='Version of the protocol [Major].[Minor].[Patch]',
        examples=['1.3.2'],
    )
    manufacturer: str = Field(..., description='Manufacturer of the AGV')
    serialNumber: str = Field(..., description='Serial number of the AGV.')
    orderId: str = Field(
        ...,
        description='Order Identification. This is to be used to identify multiple order messages that belong to the same order.',
    )
    orderUpdateId: int = Field(
        ...,
        ge=0,
        description='orderUpdate identification. Is unique per orderId. If an order update is rejected, this field is to be passed in the rejection message.',
    )
    zoneSetId: Optional[str] = Field(
        None,
        description='Unique identifier of the zone set, that the AGV has to use for navigation, or that was used by master control for planning.',
    )
    nodes: List[Node] = Field(
        ...,
        description='Array of nodes objects to be traversed for fulfilling the order. One node is enough for a valid order. Leave edge list empty for that case.',
    )
    edges: List[Edge] = Field(
        ...,
        description='Array of edge objects to be traversed for fulfilling the order.',
    )
